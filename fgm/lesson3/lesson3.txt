--------------------------------2017-5-26--------------------------------
1、typeof查看数据类型
      typeof document  //输出object
2、parseInt()只解析整数，而parseFloat()则可以解析整数和浮点数
3、运算符自增自减
y = 5
运算符           描述           例子           x运算符           y运算符
++                 自增           x=++y       6                     6
                                        x=y++       5                     6
--                   自减           x=--y         4                     4
                                        x=y--         5                     4
4、Math对象
Math.max()方法可返回参数中最大的值
5、HTML DOM setInterval()方法 
可按指定的周期（以毫秒计）不停的调用函数或计算表达式,直到clearInterval()被调用或者窗口被关闭。
6、验证字符string.length
7、数组方法slice(start,end) 
可从已有的数组中返回选定的元素
参数	描述
start	必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。
end	可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。

请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。

eval()函数可计算某个字符串。并执行其中的javascript代码

用于模式匹配的String方法
String支持4种使用正则表达式的方法。
search()它的参数是一个正则表达式，返回第一个与之匹配的子串的起始位置，如果找不到匹配的子串，它将返回-1。
比如，下面的调用返回值为4："Javascript".search(/script/i);
search()方法不支持全局检索，因为它会忽略正则表达式参数中的修饰符g

replace()方法用以执行检索与替换操作。
stringObject.replace(regexp/substr,replacement)
replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。
字符	替换文本
$1、$2、...、$99	与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。
$&	与 regexp 相匹配的子串。
$`	位于匹配子串左侧的文本。
$'	位于匹配子串右侧的文本。
$$	直接量符号。

match()方法 
它的唯一参数就是一个正则表达式，返回的是一个由匹配结果组成的数组。如果该正则表达式设置了修饰符g，则该方法返回的数组包含字符串中的所有匹配结果。
例如： "1 plus 2 equals 3".match(/\d+/g) //返回["1","2","3"]

split()方法 用以将调用它的字符串拆分为一个子串组成的数组，使用的分隔符是split()的参数,
例如: "123,456,789".split(",");返回["123","456","789"]

8、date对象
getHours() 返回Date对象的小时(0-23)
getMinutes() 返回Date对象的分钟(0-59)
getSeconds()返回Date对象的秒数(0-59)
